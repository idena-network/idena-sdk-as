syntax = "proto3";
package models;

//protoc --plugin=protoc-gen-as=d:/Projects/idena/idena-sdk-as/node_modules/.bin/as-proto-gen.cmd sdk-core/assembly/proto/models.proto --as_out=.

message ProtoStateIdentity {

    message Flip {
        bytes cid = 1;
        uint32 pair = 2;
    }

    message TxAddr {
        bytes hash = 1;
        bytes address = 2;
    }

    message Inviter {
        bytes hash = 1;
        bytes address = 2;
        uint32 epochHeight = 3;
    }

    bytes stake = 1;
    uint32 invites = 2;
    uint32 birthday = 3;
    uint32 state = 4;
    uint32 qualifiedFlips = 5;
    uint32 shortFlipPoints = 6;
    bytes pubKey = 7;
    uint32 requiredFlips = 8;
    repeated Flip flips = 9;
    uint32 generation = 10;
    bytes code = 11;
    repeated TxAddr invitees = 12;
    Inviter inviter = 13;
    bytes penalty = 14;
    uint32 validationBits = 15;
    uint32 validationStatus = 16;
    bytes profileHash = 17;
    bytes scores = 18;
    bytes delegatee = 19;
    uint32 delegationNonce = 20;
    uint32 delegationEpoch = 21;
    uint32 shardId = 22;
    bool pendingUndelegation = 23;
    bytes replenishedStake = 24;
    uint32 penaltySeconds = 25;
    int64 penaltyTimestamp = 26;
}

message ProtoBlockHeader {
    message Proposed {
        bytes parentHash = 1;
        uint64 height = 2;
        int64 timestamp = 3;
        bytes txHash = 4;
        bytes proposerPubKey = 5;
        bytes root = 6;
        bytes identityRoot = 7;
        uint32 flags = 8;
        bytes ipfsHash = 9;
        bytes offlineAddr = 10;
        bytes txBloom = 11;
        bytes blockSeed = 12;
        bytes feePerGas = 13;
        uint32 upgrade = 14;
        bytes seedProof = 15;
        bytes receiptsCid = 16;
    }

    message Empty {
        bytes parentHash = 1;
        uint64 height = 2;
        bytes root = 3;
        bytes identityRoot = 4;
        int64 timestamp = 5;
        bytes blockSeed = 6;
        uint32 flags = 7;
    }

    Proposed proposedHeader = 1;
    Empty emptyHeader = 2;
}


message ProtoStateGlobal {

    message EmptyBlocksByShards {
        uint32 shardId = 1;
        repeated bytes proposers = 2;
    }

    message ShardSize {
        uint32 shardId = 1;
        uint32 size = 2;
    }

    uint32 epoch = 1;
    int64 nextValidationTime = 2;
    uint32 validationPeriod = 3;
    bytes godAddress = 4;
    bytes wordsSeed = 5;
    uint64 lastSnapshot = 6;
    uint64 epochBlock = 7;
    bytes feePerGas = 8;
    uint64 vrfProposerThreshold = 9;
    bytes emptyBlocksBits = 10;
    uint32 godAddressInvites = 11;
    uint32 blocksCntWithoutCeremonialTxs = 12;
    repeated uint64 prevEpochBlocks = 13;
    uint32 shardsNum = 14;
    repeated EmptyBlocksByShards emptyBlocksByShards = 15;
    repeated ShardSize shardSizes = 16;
}
