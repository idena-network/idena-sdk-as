"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSONBindingsBuilder = exports.isEntry = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
const utils_1 = require("./utils");
const IDENA_DECORATOR = 'idenaBindgen';
const IDENA_IGNORE_FUNC_DECORATOR = 'idenaBindgenIgnore';
const WRAPPER_PREFIX = '__wrapper_';
function returnsVoid(node) {
    return (0, utils_1.toString)(node.signature.returnType) === 'void';
}
function numOfParameters(node) {
    return node.signature.parameters.length;
}
function hasIdenaDecorator(stmt) {
    return (isEntry(stmt) ||
        stmt.statements.some((s) => s instanceof as_1.DeclarationStatement &&
            visitor_as_1.utils.hasDecorator(s, IDENA_DECORATOR)));
}
function isEntry(source) {
    return source.range.source.sourceKind == as_1.SourceKind.USER_ENTRY;
}
exports.isEntry = isEntry;
function isClass(type) {
    return type.kind == as_1.NodeKind.CLASSDECLARATION;
}
function isField(mem) {
    return mem.kind == as_1.NodeKind.FIELDDECLARATION;
}
function isStatic(mem) {
    return mem.is(as_1.CommonFlags.STATIC);
}
function isEncodable(mem) {
    return isField(mem) && !isStatic(mem);
}
function isPayable(func) {
    return (func.decorators != null &&
        func.decorators.some((s) => (0, utils_1.toString)(s.name) != 'payable'));
}
function createDecodeStatements(_class) {
    return _class.members
        .filter(isEncodable)
        .map((field) => {
        const name = (0, utils_1.toString)(field.name);
        return (createDecodeStatement(field, `this.${name} = obj.has("${name}") ? `) +
            `: ${field.initializer != null
                ? (0, utils_1.toString)(field.initializer)
                : `this.${name}`};`);
    });
}
function createPtrDecodeStatement(field, setterPrefix = '') {
    let T = (0, utils_1.toString)(field.type);
    let name = (0, utils_1.toString)(field.name);
    return `${setterPrefix}readRegion<${T}>(${name})`;
}
function createDecodeStatement(field, setterPrefix = "") {
    let T = (0, utils_1.toString)(field.type);
    let name = (0, utils_1.toString)(field.name);
    return `${setterPrefix}decode<${T}, JSON.Obj>(obj, "${name}")`;
}
function createEncodeStatements(_class) {
    return _class.members
        .filter(isEncodable)
        .map((field) => {
        let T = (0, utils_1.toString)(field.type);
        let name = (0, utils_1.toString)(field.name);
        return `encode<${T}, JSONEncoder>(this.${name}, "${name}", encoder);`;
    });
}
// TODO: Extract this into separate module, preferrable pluggable
class JSONBindingsBuilder extends visitor_as_1.BaseVisitor {
    sb = [];
    exportedClasses = new Map();
    static isTest = false;
    wrappedFuncs = new Set();
    static build(source) {
        return new JSONBindingsBuilder().build(source);
    }
    static idenaFiles(sources) {
        return sources.filter(hasIdenaDecorator);
    }
    static checkTestBuild(sources) {
        this.isTest = sources.some((s) => s.normalizedPath.includes('.spec.'));
    }
    visitClassDeclaration(node) {
        if (!this.exportedClasses.has((0, utils_1.toString)(node.name))) {
            this.exportedClasses.set((0, utils_1.toString)(node.name), node);
        }
        super.visitClassDeclaration(node);
    }
    needsWrapper(node) {
        let isExport = node.is(as_1.CommonFlags.EXPORT);
        let alreadyWrapped = this.wrappedFuncs.has((0, utils_1.toString)(node.name));
        let noInputOrOutput = numOfParameters(node) == 0 && returnsVoid(node);
        let isIgnore = visitor_as_1.utils.hasDecorator(node, IDENA_IGNORE_FUNC_DECORATOR);
        if (isIgnore ||
            !isExport ||
            alreadyWrapped ||
            noInputOrOutput ||
            JSONBindingsBuilder.isTest)
            return false;
        return isEntry(node) || visitor_as_1.utils.hasDecorator(node, IDENA_DECORATOR);
    }
    visitFunctionDeclaration(node) {
        if (!this.needsWrapper(node)) {
            if ((isEntry(node) || visitor_as_1.utils.hasDecorator(node, IDENA_DECORATOR)) &&
                !this.wrappedFuncs.has((0, utils_1.toString)(node.name)) &&
                node.is(as_1.CommonFlags.EXPORT)) {
                this.sb.push(this.camelCaseToSnakeCaseExport((0, utils_1.toString)(node.name), ''));
                this.wrappedFuncs.add((0, utils_1.toString)(node.name));
            }
            super.visitFunctionDeclaration(node);
            return;
        }
        this.generateWrapperFunction(node);
        // Change function to not be an export
        node.flags = node.flags ^ as_1.CommonFlags.EXPORT;
        this.wrappedFuncs.add((0, utils_1.toString)(node.name));
        super.visit(node);
    }
    camelCaseToSnakeCaseExport(name, prefix = WRAPPER_PREFIX) {
        let s = (0, utils_1.makeSnakeCase)(name);
        if (s.normalize() === name.normalize()) {
            return '';
        }
        return `export { ${prefix + name} as ${s} }`;
    }
    /*
    Create a wrapper function that will be export in the function's place.
    */
    generateWrapperFunction(func) {
        let signature = func.signature;
        let params = signature.parameters;
        let returnType = signature.returnType;
        let returnTypeName = (0, utils_1.toString)(returnType)
            .split('|')
            .map((name) => name.trim())
            .filter((name) => name !== 'null')
            .join('|');
        let hasNull = (0, utils_1.toString)(returnType).includes('null');
        let name = func.name.text;
        if (func.decorators && func.decorators.length > 0) {
            this.sb.push(func.decorators.map((decorator) => (0, utils_1.toString)(decorator)).join('\n'));
        }
        var ptrParamsSb = params
            .map((param) => {
            let name = (0, utils_1.toString)(param.name);
            return `${name} : u32`;
        })
            .join(', ');
        var wrappedReturnType = "void";
        if ((0, utils_1.toString)(returnType) !== 'void') {
            wrappedReturnType = "usize";
        }
        this.sb.push(`function __wrapper_${name}(${ptrParamsSb}): ${wrappedReturnType} {`);
        if ((0, utils_1.toString)(returnType) !== 'void') {
            this.sb.push(`  let result: ${(0, utils_1.toString)(returnType)} = ${name}(`);
        }
        else {
            this.sb.push(`  ${name}(`);
        }
        if (params.length > 0) {
            this.sb[this.sb.length - 1] += params
                .map((param) => {
                let name = (0, utils_1.toString)(param.name);
                let type = (0, utils_1.toString)(param.type);
                let res = `${name}>0 ? ${createPtrDecodeStatement(param)} : ${param.initializer
                    ? (0, utils_1.toString)(param.initializer)
                    : `requireParameter<${type}>("${name}")`}`;
                return res;
            })
                .join(',\n    ');
        }
        this.sb[this.sb.length - 1] += ');';
        if ((0, utils_1.toString)(returnType) !== 'void') {
            this.sb.push(`
      return write_region<${(0, utils_1.toString)(returnType)}>(result);`);
        }
        this.sb.push(`}
export { ${WRAPPER_PREFIX + name} as ${name} }
${this.camelCaseToSnakeCaseExport(name)}
`);
    }
    typeName(type) {
        if (!isClass(type)) {
            return (0, utils_1.toString)(type);
        }
        type = type;
        let className = (0, utils_1.toString)(type.name);
        if (type.isGeneric) {
            className += '<' + type.typeParameters.map(utils_1.toString).join(', ') + '>';
        }
        return className;
    }
    build(source) {
        this.sb = [];
        this.visit(source);
        let sourceText = source.statements.map((stmt) => {
            let str;
            if (isClass(stmt) &&
                visitor_as_1.utils.hasDecorator(stmt, IDENA_DECORATOR)) {
                let _class = stmt;
                let fields = _class.members
                    .filter(isField)
                    .map((field) => field);
                if (fields.some((field) => field.type == null)) {
                    throw new Error('All Fields must have explicit type declaration.');
                }
                fields.forEach((field) => {
                    if (field.initializer == null) {
                        field.initializer = utils_1.SimpleParser.parseExpression(`defaultValue<${(0, utils_1.toString)(field.type)}>())`);
                    }
                });
                str = (0, utils_1.toString)(stmt);
                str = str.slice(0, str.lastIndexOf('}'));
                let className = this.typeName(_class);
                str += `
  decode<_V = Uint8Array>(buf: _V): ${className} {
    let json: JSON.Obj;
    if (buf instanceof Uint8Array) {
      json = JSON.parse(buf);
    } else {
      assert(buf instanceof JSON.Obj, "argument must be Uint8Array or Json Object");
      json = <JSON.Obj> buf;
    }
    return this._decode(json);
  }

  static decode(buf: Uint8Array): ${className} {
    return decode<${className}>(buf);
  }

  private _decode(obj: JSON.Obj): ${className} {
    ${createDecodeStatements(_class).join('\n    ')}
    log("invoke _decode for ${_class.name}");
    return this;
  }

  _encode(name: string | null = "", _encoder: JSONEncoder | null = null): JSONEncoder {
    let encoder = _encoder == null ? new JSONEncoder() : _encoder;
    encoder.pushObject(name);
    ${createEncodeStatements(_class).join('\n    ')}
    encoder.popObject();
    return encoder;
  }
  encode(): Uint8Array {
    return this._encode().serialize();
  }

  serialize(): Uint8Array {
    return this.encode();
  }

  toJSON(): string {
    return this._encode().toString();
  }
}`;
            }
            else {
                str = (0, utils_1.toString)(stmt);
            }
            return str;
        });
        return sourceText.concat(this.sb).join('\n');
    }
}
exports.JSONBindingsBuilder = JSONBindingsBuilder;
//# sourceMappingURL=data:application/json;base64,