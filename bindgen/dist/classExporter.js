"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassExporter = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
const JSONBuilder_1 = require("./JSONBuilder");
const utils_1 = require("./utils");
const toString = visitor_as_1.utils.toString;
const privateDecorator = 'contractPrivate';
class ClassExporter extends visitor_as_1.ClassDecorator {
    sb = [];
    static classSeen;
    static hasConstructor;
    static get className() {
        return toString(ClassExporter.classSeen.name);
    }
    checkMethods(name) {
        let _class = ClassExporter.classSeen;
        _class.members.forEach((member) => {
            if (member instanceof as_1.MethodDeclaration &&
                !member.is(as_1.CommonFlags.PRIVATE)) {
                if (toString(member.name) === name) {
                    throw new Error(`Method "${toString(member.name)}" already used; cannot export constructor using the same name.`);
                }
            }
        });
    }
    visitFieldDeclaration(node) { }
    visitMethodDeclaration(node) {
        if (node.is(as_1.CommonFlags.SET) || node.is(as_1.CommonFlags.GET)) {
            throw new Error('Exported Singleton class cannot have properties. Found ' +
                node.name.text);
        }
        // Private methods should be skipped.
        if (node.is(as_1.CommonFlags.PRIVATE)) {
            return;
        }
        let privateCheck = visitor_as_1.utils.hasDecorator(node, privateDecorator)
            ? `__assertPrivate();`
            : '';
        let name = toString(node.name);
        let decorators = (node.decorators || []).map(toString);
        let returnType = toString(node.signature.returnType);
        let origParams = node.signature.parameters.map(visitor_as_1.utils.cloneNode);
        let parameters = origParams.map((param) => {
            if (param.implicitFieldDeclaration) {
                param.name.text = param.name.text.substring(2);
            }
            return toString(param);
        });
        let pramNames = origParams.map((param) => {
            return toString(param.name);
        });
        let isInit = name === 'constructor';
        let createContractStr = `let __contract: ${ClassExporter.className};
if (__checkState()) {
__contract = __getState<${ClassExporter.className}>();
}${!ClassExporter.hasConstructor
            ? ` else {
__contract = new ${ClassExporter.className}();
}`
            : ''}`;
        let assertStr = '';
        if (isInit) {
            assertStr = `assert(isNull(__contract), "contract is already initialized");`;
        }
        else if (ClassExporter.hasConstructor) {
            assertStr = `assert(!isNull(__contract), "contract is not initialized");`;
        }
        let isVoid = returnType === 'void';
        let body = isInit
            ? `__contract = new ${ClassExporter.className}(${pramNames.join(', ')});`
            : `${!isVoid ? 'let res =  ' : ''}__contract.${name}(${pramNames.join(', ')});`;
        if (isInit) {
            name = '__deploy';
            parameters = origParams.map((node) => `${toString(node.name)}: ${toString(node.type)}${node.initializer ? ' = ' + toString(node.initializer) : ''}`);
            returnType = 'void';
        }
        if (isInit) {
            if (!decorators.some((decorator) => decorator.includes('exportAs'))) {
                decorators.push(`@exportAs("deploy")`);
                this.checkMethods('deploy');
            }
            else {
                let decorator = node.decorators.find((d) => toString(d.name) === 'exportAs');
                if (decorator.args.length == 1) {
                    this.checkMethods(toString(decorator.args[0]));
                }
            }
        }
        const hasMutateState = decorators.some((decorator) => {
            let res = decorator.includes('mutateState');
            return res;
        });
        this.sb.push(`${decorators.join('\n')}
export function ${name}(${parameters.join(', ')}): ${returnType} {
  ${createContractStr}
  ${privateCheck}
  ${assertStr}
  ${body}
  ${isInit || hasMutateState ? `__setState(__contract);` : ''}
  ${isVoid || isInit ? '' : 'return res;'}
}`);
    }
    visitClassDeclaration(node) {
        if ((0, JSONBuilder_1.isEntry)(node) && node.is(as_1.CommonFlags.EXPORT)) {
            let name = toString(node.name);
            if (ClassExporter.classSeen) {
                throw new Error(`Cannot export class ${name}. ${ClassExporter.className} already exported. `);
            }
            ClassExporter.classSeen = node;
            ClassExporter.hasConstructor = node.members.some((member) => {
                if (member instanceof as_1.MethodDeclaration) {
                    return toString(member.name) === 'constructor';
                }
                return false;
            });
            this.visit(node.members);
            this.sb.push(`
        @idenaBindgenIgnore
        export function allocate(size : u32) : usize {
          return __allocate(size);
        }`);
            node.flags = node.flags ^ as_1.CommonFlags.EXPORT;
            let newStatements = utils_1.SimpleParser.parseTopLevel(this.sb.join('\n')).map((n) => {
                if (n instanceof as_1.FunctionDeclaration) {
                    n.flags = n.flags | as_1.CommonFlags.EXPORT;
                    n.flags = n.flags | as_1.CommonFlags.MODULE_EXPORT;
                }
                n.range = node.range;
                return n;
            });
            node.range.source.statements.push(...newStatements);
        }
    }
    get name() {
        return 'idenaBindgen';
    }
    static visit(source) {
        if (source.sourceKind != as_1.SourceKind.USER_ENTRY) {
            return;
        }
        let visitor = new ClassExporter();
        visitor.visit(source);
    }
}
exports.ClassExporter = ClassExporter;
//# sourceMappingURL=data:application/json;base64,